Single Number (JAVA):
class Solution {
    public int singleNumber(int[] nums) {
        int single = 0;
        int count = nums.length;

        if (count == 0) {
                return 0;
        }

        Arrays.sort(nums);
        while (count >= 0) {
            if (count == 1) {
                return nums[count - 1];
            }

            if (nums[count - 2] != nums[count - 1]) {
                    single = nums[count -1];
                    break;
                }
                count -= 2;
            }
        return single;
    }
}

Majority Element (JAVA):
class Solution {
    public int majorityElement(int[] nums) {
        if(nums.length == 1){
            return nums[0];

        }
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
OR
class Solution {
    public int majorityElement(int[] nums) {
        int result = nums[0];  // Create num variable result and assign first value on it and increase the count by 1
        int count = 1;
        for (int i=1; i<nums.length; i++) {
            int num = nums[i];
            // Check, If result in equal to num variable, increase the count by 1
            if (result == num) 
                count++;
            else 
                count--;
            if (count == 0) {
                result = num;  // Then result variable assign the value of num          
                count = 1; // and increase the count by 1
            }
        }        
        return result;
    }
}

3Sum (JAVA):
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        Set<List<Integer>> threeSum = new HashSet<>();       
        for(int i = 0; i < nums.length - 2; i++){
            int j = i + 1;
            int k = nums.length - 1;
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];                
                if(sum == 0){
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                    threeSum.add(temp);
                    j++;
                    k--;
                }
                else if(sum > 0)
                    k--;
                else
                    j++;
            }
        }
        return new ArrayList<>(threeSum);
    }
}
