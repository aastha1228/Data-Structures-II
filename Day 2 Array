Sort Colors (JAVA):
class Solution {
   public void sortColors(int[] a) {
   int n=a.length;
   int[] output = new int [n+1];  
   int[] count = new int [3]; //create count array with size 3
  
  for (int i = 0; i <= 2; ++i)   
  {  
    count[i] = 0; // Initialize count array with all zeros  
  }  
    
  for (int i = 0; i < n; i++) // Store the count of each element  
  {  
    count[a[i]]++;  
  }  
  
   for(int i = 1; i<=2; i++)   
      count[i] += count[i-1]; //find cumulative frequency  
  for (int i = n - 1; i >= 0; i--)  //This loop will find the index of each element of the original array in count array, and place the elements in output array  
  {  
    output[count[a[i]] - 1] = a[i];  
    count[a[i]]--; // decrease count for same numbers  
  }  
   for(int i = 0; i<n; i++) 
      a[i] = output[i]; //store the sorted elements into main array   
  }  
}

Merge Intervals (JAVA):
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> result = new ArrayList<>();
        Arrays.sort(intervals, (e1,e2)-> e1[0]- e2[0]);
        int[] newInterval = new int[2];
        newInterval[0] = intervals[0][0];
        newInterval[1] = intervals[0][1];
        int n = intervals.length;
        for(int i=1;i<n;i++) {
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            if(newInterval[1] < intervals[i][0]) {
                int[] tempArr = new int[2];
                tempArr[0] = newInterval[0];
                tempArr[1] = newInterval[1];
                result.add(tempArr);
                newInterval[0] = intervals[i][0];
            }
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
        }
        result.add(newInterval);
        int[][] newResult = result.toArray(new int[result.size()][2]);
        return newResult;
    }
}

Design HashMap (JAVA):
class MyHashMap {
    int[] ar=new int [1000001];
    public MyHashMap() {
        
    }
    
    public void put(int key, int value) {
      ar[key]=value+1;
    }
    
    public int get(int key) {
        return ar[key]-1;
    }
    
    public void remove(int key) {
        ar[key]=0;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
